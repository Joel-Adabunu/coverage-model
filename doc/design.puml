@startuml

skinparam class {
  BackgroundColor #4AD386
  BorderColor #a0a0a0
  BorderColor black
  ArrowColor black
  FontName  Arial Unicode MS
  FontSize 20
}

skinparam classFontSize 24
skinparam classAttributeIconSize 0
skinparam defaultFontSize 20

skinparam ArrowColor black
skinparam ArrowThickness 2

hide circle

class Coverage {
-covered: int
-missed: int
[...]
+add(additional: Coverage): Coverage
+getCovered(): int
+getCoveredPercentage(): Fraction
+getTotal(): int
{method}[...]
}
class CoverageLeaf {
-metric: CoverageMetric
-coverage: Coverage
[...]
+getCoverage(): Coverage
+getCoverage(searchMetric: CoverageMetric): Coverage
+getMetric(): CoverageMetric
{method}[...]
}
class CoverageMetric {
-name: String
-order: int
-leaf: boolean
[...]
+compareTo(other: CoverageMetric): int
+{static}getAvailableCoverageMetrics(): List<CoverageMetric>
+getName(): String
+isLeaf(): boolean
{method}[...]
}
class CoverageNode {
-metric: CoverageMetric
-name: String
-children: List<CoverageNode>
-leaves: List<CoverageLeaf>
-parent: CoverageNode
[...]
+add(children: CoverageNode)
+getMetrics(): NavigableSet<CoverageMetric>
+find(searchMetric: CoverageMetric, searchName: String):Optional<CoverageNode>
+copyTree(): CoverageNode
-createChild(childName: String): CoverageNode
{method}[...]
}
class FileCoverageNode {
+getPath(): String
#copyEmpty(): CoverageNode
}
class MethodCoverageNode {
-lineNumber: int
+hasValidLineNumber(): boolean
+getLineNumber(): int
{method}[...]
}
class PackageCoverageNode {
+getPath(): String
#copyEmpty(): CoverageNode
}
enum MetricType <<enumeration>>{
LEAF
COMPOSITE
}
Coverage --* CoverageNode
CoverageNode <|-- FileCoverageNode
CoverageNode <|-- MethodCoverageNode
CoverageNode <|-- PackageCoverageNode
CoverageNode *-- CoverageLeaf
CoverageMetric -- MetricType
CoverageMetric <-- CoverageLeaf
CoverageMetric <-- CoverageNode

@enduml